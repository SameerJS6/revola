{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shadcn-command-menu",
  "type": "registry:component",
  "title": "Shadcn Command Menu",
  "description": "A responsive shadcn's adapted command menu component that automatically adapts to screen size - drawer on mobile, modal on desktop.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator",
    "https://revola.sameerjs.com/r/responsive-command.json"
  ],
  "files": [
    {
      "path": "registry/cmdk/examples/shadcn-command-menu.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nimport { ArrowRight, CornerDownLeftIcon } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  ResponsiveCommand,\r\n  ResponsiveCommandEmpty,\r\n  ResponsiveCommandGroup,\r\n  ResponsiveCommandInput,\r\n  ResponsiveCommandItem,\r\n  ResponsiveCommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  ResponsiveDialog,\r\n  ResponsiveDialogContent,\r\n  ResponsiveDialogDescription,\r\n  ResponsiveDialogHeader,\r\n  ResponsiveDialogTitle,\r\n  ResponsiveDialogTrigger,\r\n} from \"@/components/ui/revola\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { type Color, type ColorPalette } from \"@/lib/colors\";\r\nimport { source, type Tree } from \"@/lib/source\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { useIsMac } from \"@/hooks/use-is-mac\";\r\nimport { useMutationObserver } from \"@/hooks/use-mutation-observer\";\r\n\r\ntype TreeNode = (typeof source.pageTree)[\"children\"][number];\r\n\r\nfunction copyToClipboardWithoutMeta(value: string) {\r\n  navigator.clipboard.writeText(value);\r\n}\r\n\r\ntype SimplifiedGroup = {\r\n  name: string;\r\n  children: Array<{\r\n    type: \"page\";\r\n    name: string;\r\n    url: string;\r\n    icon?: React.ReactElement<unknown, string | React.JSXElementConstructor<any>>;\r\n  }>;\r\n};\r\n\r\ntype CommandMenuProps = {\r\n  tree: Tree[\"pageTree\"];\r\n  colors: ColorPalette[];\r\n};\r\n\r\n// Transform the mixed tree structure into simplified groups\r\nfunction simplifyTreeStructure(tree: TreeNode[]): SimplifiedGroup[] {\r\n  const groups: SimplifiedGroup[] = [];\r\n  let currentGroup: SimplifiedGroup | null = null;\r\n\r\n  for (const item of tree) {\r\n    switch (item.type) {\r\n      case \"separator\": {\r\n        currentGroup = {\r\n          name: item.name?.toString() || \"Untitled\",\r\n          children: [],\r\n        };\r\n        groups.push(currentGroup);\r\n        break;\r\n      }\r\n      case \"page\": {\r\n        if (currentGroup) {\r\n          currentGroup.children.push({\r\n            type: \"page\",\r\n            name: item.name?.toString() || \"Untitled\",\r\n            url: item.url,\r\n            ...(item.icon && { icon: item.icon }),\r\n          });\r\n        } else {\r\n          groups.push({\r\n            name: item.name?.toString() || \"Untitled\",\r\n            children: [\r\n              {\r\n                type: \"page\",\r\n                name: item.name?.toString() || \"Untitled\",\r\n                url: item.url,\r\n                ...(item.icon && { icon: item.icon }),\r\n              },\r\n            ],\r\n          });\r\n        }\r\n        break;\r\n      }\r\n      case \"folder\": {\r\n        const folderPages = item.children?.filter((child) => child.type === \"page\" && \"url\" in child) || [];\r\n\r\n        groups.push({\r\n          name: item.name?.toString() || \"Untitled\",\r\n          children: folderPages.map((page) => ({\r\n            type: \"page\" as const,\r\n            name: page.name?.toString() || \"Untitled\",\r\n            url: (page as any).url,\r\n            ...(page.icon && { icon: page.icon }),\r\n          })),\r\n        });\r\n\r\n        currentGroup = null;\r\n        break;\r\n      }\r\n      default:\r\n        return groups;\r\n    }\r\n  }\r\n\r\n  return groups;\r\n}\r\n\r\nexport default function CommandMenu({ tree, colors }: CommandMenuProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [copyPayload, setCopyPayload] = React.useState(\"\");\r\n  const [selectedType, setSelectedType] = React.useState<\"color\" | \"page\" | null>(null);\r\n\r\n  const isMac = useIsMac();\r\n  const router = useRouter();\r\n\r\n  const handlePageHighlight = React.useCallback(() => {\r\n    setSelectedType(\"page\");\r\n    setCopyPayload(\"\");\r\n  }, [setSelectedType, setCopyPayload]);\r\n\r\n  const handleColorHighlight = React.useCallback(\r\n    (color: Color) => {\r\n      setSelectedType(\"color\");\r\n      setCopyPayload(color.className);\r\n    },\r\n    [setSelectedType, setCopyPayload]\r\n  );\r\n\r\n  const runCommand = React.useCallback((command: () => unknown) => {\r\n    setOpen(false);\r\n    command();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const down = (e: KeyboardEvent) => {\r\n      if ((e.key === \"k\" && (e.metaKey || e.ctrlKey)) || e.key === \"/\") {\r\n        if (\r\n          (e.target instanceof HTMLElement && e.target.isContentEditable) ||\r\n          e.target instanceof HTMLInputElement ||\r\n          e.target instanceof HTMLTextAreaElement ||\r\n          e.target instanceof HTMLSelectElement\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        setOpen((open) => !open);\r\n      }\r\n\r\n      if (e.key === \"c\" && (e.metaKey || e.ctrlKey)) {\r\n        runCommand(() => {\r\n          if (selectedType === \"color\") {\r\n            copyToClipboardWithoutMeta(copyPayload);\r\n          }\r\n\r\n          if (selectedType === \"page\") {\r\n            copyToClipboardWithoutMeta(copyPayload);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", down);\r\n    return () => document.removeEventListener(\"keydown\", down);\r\n  }, [copyPayload, runCommand, selectedType]);\r\n\r\n  const listRef = React.useRef<HTMLDivElement>(null);\r\n  const scrollId = React.useRef<ReturnType<typeof setTimeout>>(null);\r\n\r\n  const simplifiedTree = simplifyTreeStructure(tree.children);\r\n\r\n  return (\r\n    <ResponsiveDialog shouldScaleBackground={false} open={open} onOpenChange={setOpen}>\r\n      <ResponsiveDialogTrigger asChild>\r\n        <Button\r\n          variant=\"secondary\"\r\n          className={cn(\r\n            \"relative h-11 w-full justify-start rounded-lg bg-secondary pl-2.5 font-normal text-secondary-foreground/60 shadow-none dark:bg-card sm:pr-12 md:w-40 lg:w-56 xl:w-64\"\r\n          )}\r\n          onClick={() => setOpen(true)}\r\n        >\r\n          <span className=\"hidden lg:inline-flex\">Search documentation...</span>\r\n          <span className=\"inline-flex lg:hidden\">Search...</span>\r\n          <div className=\"absolute right-1.5 top-1/2 hidden -translate-y-1/2 gap-1 sm:flex\">\r\n            <CommandMenuKbd>{isMac ? \"âŒ˜\" : \"Ctrl\"}</CommandMenuKbd>\r\n            <CommandMenuKbd className=\"aspect-square\">K</CommandMenuKbd>\r\n          </div>\r\n        </Button>\r\n      </ResponsiveDialogTrigger>\r\n      <ResponsiveDialogContent\r\n        showCloseButton={false}\r\n        className=\"overflow-hidden rounded-t-2xl border-none bg-clip-padding p-2 pb-11 shadow-2xl ring-4 ring-neutral-200/80 dark:bg-neutral-900 dark:ring-neutral-800 sm:rounded-xl\"\r\n      >\r\n        <ResponsiveDialogHeader className=\"sr-only\">\r\n          <ResponsiveDialogTitle>Search documentation...</ResponsiveDialogTitle>\r\n          <ResponsiveDialogDescription>Search for a command to run...</ResponsiveDialogDescription>\r\n        </ResponsiveDialogHeader>\r\n        <ResponsiveCommand\r\n          filter={(value, search, keywords) => {\r\n            const extendValue = value + \" \" + (keywords?.join(\" \") || \"\");\r\n            if (extendValue.toLowerCase().includes(search.toLowerCase())) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          }}\r\n          className=\"rounded-none bg-transparent [&_[cmdk-input-wrapper]]:mb-0 [&_[cmdk-input-wrapper]]:!h-9 [&_[cmdk-input-wrapper]]:rounded-md [&_[cmdk-input-wrapper]]:border [&_[cmdk-input-wrapper]]:border-input [&_[cmdk-input-wrapper]]:bg-input/50 [&_[cmdk-input-wrapper]]:px-3 [&_[cmdk-input]]:!h-9 [&_[cmdk-input]]:py-0\"\r\n        >\r\n          <ResponsiveCommandInput\r\n            onValueChange={(e) => {\r\n              e === \"\" && setCopyPayload(\"\");\r\n\r\n              if (scrollId.current) {\r\n                clearTimeout(scrollId.current);\r\n              }\r\n\r\n              scrollId.current = setTimeout(() => {\r\n                if (listRef.current) {\r\n                  listRef.current?.scrollTo({ top: 0 });\r\n                }\r\n              }, 0);\r\n            }}\r\n            placeholder=\"Search documentation...\"\r\n          />\r\n          <ResponsiveCommandList ref={listRef} className=\"min-h-80 scroll-pb-1.5 scroll-pt-2 no-scrollbar\">\r\n            <ResponsiveCommandEmpty className=\"py-12 text-center text-sm text-muted-foreground\">\r\n              No results found.\r\n            </ResponsiveCommandEmpty>\r\n\r\n            {simplifiedTree.map((group, index) => {\r\n              return (\r\n                <ResponsiveCommandGroup\r\n                  heading={group.name}\r\n                  key={group.name + index + Math.random()}\r\n                  className=\"!p-0 [&_[cmdk-group-heading]]:scroll-mt-16 [&_[cmdk-group-heading]]:!p-3 [&_[cmdk-group-heading]]:!pb-1\"\r\n                >\r\n                  {group.children.map((item) => {\r\n                    if (item.type === \"page\") {\r\n                      return (\r\n                        <CommandMenuItem\r\n                          key={item.url}\r\n                          keywords={undefined}\r\n                          onHighlight={handlePageHighlight}\r\n                          value={item.name?.toString() ? `${group.name} ${item.name}` : \"\"}\r\n                          onSelect={() => {\r\n                            runCommand(() => router.push(item.url));\r\n                          }}\r\n                        >\r\n                          <ArrowRight />\r\n                          {item.name}\r\n                        </CommandMenuItem>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  })}\r\n                </ResponsiveCommandGroup>\r\n              );\r\n            })}\r\n\r\n            {colors.map((colorPalette) => (\r\n              <ResponsiveCommandGroup\r\n                key={colorPalette.name}\r\n                heading={colorPalette.name.charAt(0).toUpperCase() + colorPalette.name.slice(1)}\r\n                className=\"!p-0 [&_[cmdk-group-heading]]:!p-3\"\r\n              >\r\n                {colorPalette.colors.map((color) => (\r\n                  <CommandMenuItem\r\n                    key={color.hex}\r\n                    value={color.className}\r\n                    keywords={[\"color\", color.name, color.className]}\r\n                    onHighlight={() => handleColorHighlight(color)}\r\n                    onSelect={() => {\r\n                      runCommand(() => copyToClipboardWithoutMeta(color.oklch));\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"aspect-square size-4 rounded-sm border-border bg-[var(--color)] after:rounded-sm\"\r\n                      style={{ \"--color\": color.oklch } as React.CSSProperties}\r\n                    />\r\n                    {color.className}\r\n                    <span className=\"ml-auto font-mono text-xs font-normal tabular-nums text-muted-foreground\">\r\n                      {color.oklch}\r\n                    </span>\r\n                  </CommandMenuItem>\r\n                ))}\r\n              </ResponsiveCommandGroup>\r\n            ))}\r\n          </ResponsiveCommandList>\r\n        </ResponsiveCommand>\r\n\r\n        <div className=\"absolute inset-x-0 bottom-0 z-20 flex h-10 items-center gap-2 border-t border-t-neutral-100 bg-neutral-50 px-4 text-xs font-medium text-muted-foreground dark:border-t-neutral-700 dark:bg-neutral-800 sm:rounded-b-xl\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <CommandMenuKbd>\r\n              <CornerDownLeftIcon />\r\n            </CommandMenuKbd>\r\n            {selectedType === \"page\" ? \"Go to Page\" : null}\r\n            {selectedType === \"color\" ? \"Copy OKLCH\" : null}\r\n          </div>\r\n          {copyPayload && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"!h-4\" />\r\n              <div className=\"flex items-center gap-1\">\r\n                <CommandMenuKbd>{isMac ? \"âŒ˜\" : \"Ctrl\"}</CommandMenuKbd>\r\n                <CommandMenuKbd>C</CommandMenuKbd>\r\n                {copyPayload}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </ResponsiveDialogContent>\r\n    </ResponsiveDialog>\r\n  );\r\n}\r\n\r\nfunction CommandMenuItem({\r\n  children,\r\n  className,\r\n  onHighlight,\r\n  ...props\r\n}: React.ComponentProps<typeof ResponsiveCommandItem> & {\r\n  onHighlight?: () => void;\r\n  \"data-selected\"?: string;\r\n  \"aria-selected\"?: string;\r\n}) {\r\n  const ref = React.useRef<HTMLDivElement>(null);\r\n\r\n  useMutationObserver(ref, (mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      if (\r\n        mutation.type === \"attributes\" &&\r\n        mutation.attributeName === \"aria-selected\" &&\r\n        ref.current?.getAttribute(\"aria-selected\") === \"true\"\r\n      ) {\r\n        onHighlight?.();\r\n      }\r\n    });\r\n  });\r\n\r\n  return (\r\n    <ResponsiveCommandItem\r\n      ref={ref}\r\n      className={cn(\r\n        \"h-9 rounded-md border border-transparent !px-3 font-medium data-[selected=true]:border-input data-[selected=true]:bg-input/50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </ResponsiveCommandItem>\r\n  );\r\n}\r\n\r\nfunction CommandMenuKbd({ className, ...props }: React.ComponentProps<\"kbd\">) {\r\n  return (\r\n    <kbd\r\n      className={cn(\r\n        \"not-prose pointer-events-none flex h-5 select-none items-center justify-center gap-1 rounded border bg-background px-1 font-sans text-[0.7rem] font-medium text-muted-foreground [&_svg:not([class*='size-'])]:size-3\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/colors.ts",
      "content": "import { z } from \"zod\";\r\n\r\nimport { colors } from \"@/registry/registry-colors\";\r\n\r\nconst colorSchema = z.object({\r\n  name: z.string(),\r\n  id: z.string(),\r\n  scale: z.number(),\r\n  className: z.string(),\r\n  hex: z.string(),\r\n  rgb: z.string(),\r\n  hsl: z.string(),\r\n  foreground: z.string(),\r\n  oklch: z.string(),\r\n  var: z.string(),\r\n});\r\n\r\nconst colorPaletteSchema = z.object({\r\n  name: z.string(),\r\n  colors: z.array(colorSchema),\r\n});\r\n\r\nexport type ColorPalette = z.infer<typeof colorPaletteSchema>;\r\n\r\nexport function getColorFormat(color: Color) {\r\n  return {\r\n    className: `bg-${color.name}-100`,\r\n    hex: color.hex,\r\n    rgb: color.rgb,\r\n    hsl: color.hsl,\r\n    oklch: color.oklch,\r\n    var: `--color-${color.name}-${color.scale}`,\r\n  };\r\n}\r\n\r\nexport type ColorFormat = keyof ReturnType<typeof getColorFormat>;\r\n\r\nexport function getColors() {\r\n  const tailwindColors = colorPaletteSchema.array().parse(\r\n    Object.entries(colors)\r\n      .map(([name, color]) => {\r\n        if (!Array.isArray(color)) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          name,\r\n          colors: color.map((color) => {\r\n            const rgb = color.rgb.replace(/^rgb\\((\\d+),(\\d+),(\\d+)\\)$/, \"$1 $2 $3\");\r\n\r\n            return {\r\n              ...color,\r\n              name,\r\n              id: `${name}-${color.scale}`,\r\n              className: `${name}-${color.scale}`,\r\n              var: `--color-${name}-${color.scale}`,\r\n              rgb,\r\n              hsl: color.hsl.replace(/^hsl\\(([\\d.]+),([\\d.]+%),([\\d.]+%)\\)$/, \"$1 $2 $3\"),\r\n              oklch: `oklch(${color.oklch.replace(/^oklch\\(([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\)$/, \"$1 $2 $3\")})`,\r\n              foreground: getForegroundFromBackground(rgb),\r\n            };\r\n          }),\r\n        };\r\n      })\r\n      .filter(Boolean)\r\n  );\r\n\r\n  return tailwindColors;\r\n}\r\n\r\nexport type Color = ReturnType<typeof getColors>[number][\"colors\"][number];\r\n\r\nfunction getForegroundFromBackground(rgb: string) {\r\n  const [r, g, b] = rgb.split(\" \").map(Number);\r\n\r\n  function toLinear(number: number): number {\r\n    const base = number / 255;\r\n    return base <= 0.04045 ? base / 12.92 : Math.pow((base + 0.055) / 1.055, 2.4);\r\n  }\r\n\r\n  const luminance = 0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);\r\n\r\n  return luminance > 0.179 ? \"#000\" : \"#fff\";\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/source.ts",
      "content": "import { createElement } from \"react\";\r\nimport { docs } from \"@/.source\";\r\n\r\nimport { icons } from \"lucide-react\";\r\n\r\nimport { loader } from \"fumadocs-core/source\";\r\n\r\ntype Tree = typeof source;\r\n\r\nconst source = loader({\r\n  baseUrl: \"/docs\",\r\n  icon(icon) {\r\n    if (!icon) return;\r\n\r\n    if (icon in icons) return createElement(icons[icon as keyof typeof icons]);\r\n  },\r\n  source: docs.toFumadocsSource(),\r\n});\r\n\r\nexport { source, type Tree };\r\n",
      "type": "registry:lib"
    },
    {
      "path": "hooks/use-is-mac.ts",
      "content": "import { useEffect, useState } from \"react\";\r\n\r\nexport function useIsMac() {\r\n  const [isMac, setIsMac] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setIsMac(navigator.platform.toUpperCase().includes(\"MAC\"));\r\n  }, []);\r\n\r\n  return isMac;\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "hooks/use-mutation-observer.ts",
      "content": "import * as React from \"react\";\r\n\r\nexport const useMutationObserver = (\r\n  ref: React.RefObject<HTMLElement | null>,\r\n  callback: MutationCallback,\r\n  options: MutationObserverInit = {\r\n    attributes: true,\r\n    characterData: true,\r\n    childList: true,\r\n    subtree: true,\r\n  }\r\n) => {\r\n  React.useEffect(() => {\r\n    if (ref.current) {\r\n      const observer = new MutationObserver(callback);\r\n      observer.observe(ref.current, options);\r\n      return () => observer.disconnect();\r\n    }\r\n  }, [ref, callback, options]);\r\n};\r\n",
      "type": "registry:hook"
    }
  ]
}