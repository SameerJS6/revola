{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-code",
  "type": "registry:ui",
  "title": "OTP Code Dialog",
  "description": "A responsive OTP verification dialog with input validation - drawer on mobile, modal on desktop.",
  "dependencies": [
    "input-otp"
  ],
  "registryDependencies": [
    "button",
    "https://revola.sameerjs.com/r/revola.json"
  ],
  "files": [
    {
      "path": "registry/revola/examples/origin-ui/forms/authentication/otp-code.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { OTPInput, type SlotProps } from \"input-otp\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  ResponsiveDialog,\r\n  ResponsiveDialogClose,\r\n  ResponsiveDialogContent,\r\n  ResponsiveDialogDescription,\r\n  ResponsiveDialogHeader,\r\n  ResponsiveDialogTitle,\r\n  ResponsiveDialogTrigger,\r\n} from \"@/components/ui/revola\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst CORRECT_CODE = \"6996\";\r\n\r\nexport default function OtpCodeDialog() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [hasGuessed, setHasGuessed] = useState<undefined | boolean>(undefined);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (hasGuessed) {\r\n      closeButtonRef.current?.focus();\r\n    }\r\n  }, [hasGuessed]);\r\n\r\n  async function onSubmit(e?: React.FormEvent<HTMLFormElement>) {\r\n    e?.preventDefault?.();\r\n\r\n    inputRef.current?.select();\r\n    await new Promise((r) => setTimeout(r, 1_00));\r\n\r\n    setHasGuessed(value === CORRECT_CODE);\r\n\r\n    setValue(\"\");\r\n    setTimeout(() => {\r\n      inputRef.current?.blur();\r\n    }, 20);\r\n  }\r\n\r\n  return (\r\n    <ResponsiveDialog>\r\n      <ResponsiveDialogTrigger asChild>\r\n        <Button variant=\"outline\" className=\"h-12 rounded-full px-6 capitalize\">\r\n          Verify OTP\r\n        </Button>\r\n      </ResponsiveDialogTrigger>\r\n      <ResponsiveDialogContent className=\"mx-auto sm:max-w-[400px]\">\r\n        <div className=\"space-y-4 p-4 pb-6 sm:p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <div className=\"flex size-11 shrink-0 items-center justify-center rounded-full border\" aria-hidden=\"true\">\r\n              <svg\r\n                className=\"stroke-zinc-800 dark:stroke-zinc-100\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                viewBox=\"0 0 32 32\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <circle cx=\"16\" cy=\"16\" r=\"12\" fill=\"none\" strokeWidth=\"8\" />\r\n              </svg>\r\n            </div>\r\n            <ResponsiveDialogHeader className=\"py-0\">\r\n              <ResponsiveDialogTitle className=\"sm:text-center\">\r\n                {hasGuessed ? \"Code verified!\" : \"Enter confirmation code\"}\r\n              </ResponsiveDialogTitle>\r\n              <ResponsiveDialogDescription className=\"sm:text-center\">\r\n                {hasGuessed\r\n                  ? \"Your code has been successfully verified.\"\r\n                  : `Check your email and enter the code - Try ${CORRECT_CODE}`}\r\n              </ResponsiveDialogDescription>\r\n            </ResponsiveDialogHeader>\r\n          </div>\r\n\r\n          {hasGuessed ? (\r\n            <div className=\"text-center\">\r\n              <ResponsiveDialogClose asChild>\r\n                <Button type=\"button\" ref={closeButtonRef}>\r\n                  Close\r\n                </Button>\r\n              </ResponsiveDialogClose>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-center\">\r\n                <OTPInput\r\n                  inputMode=\"numeric\"\r\n                  id=\"confirmation-code\"\r\n                  ref={inputRef}\r\n                  value={value}\r\n                  onChange={setValue}\r\n                  containerClassName=\"flex items-center gap-3 has-disabled:opacity-50\"\r\n                  maxLength={4}\r\n                  onFocus={() => setHasGuessed(undefined)}\r\n                  render={({ slots }) => (\r\n                    <div className=\"flex gap-2\">\r\n                      {slots.map((slot, idx) => (\r\n                        <Slot key={idx} {...slot} />\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  onComplete={onSubmit}\r\n                />\r\n              </div>\r\n              {hasGuessed === false && (\r\n                <p className=\"text-center text-xs text-muted-foreground\" role=\"alert\" aria-live=\"polite\">\r\n                  Invalid code. Please try again.\r\n                </p>\r\n              )}\r\n              <p className=\"text-center text-sm\">\r\n                <a className=\"underline hover:no-underline\" href=\"#\">\r\n                  Resend code\r\n                </a>\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </ResponsiveDialogContent>\r\n    </ResponsiveDialog>\r\n  );\r\n}\r\n\r\nfunction Slot(props: SlotProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"shadow-xs flex size-9 items-center justify-center rounded-md border border-input bg-background font-medium text-foreground transition-[color,box-shadow]\",\r\n        { \"z-10 border-ring ring-[3px] ring-ring/50\": props.isActive }\r\n      )}\r\n    >\r\n      {props.char !== null && <div>{props.char}</div>}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}