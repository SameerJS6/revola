{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "revola",
  "type": "registry:ui",
  "title": "Revola",
  "description": "A responsive dialog component that automatically adapts to screen size - drawer on mobile, modal on desktop.",
  "dependencies": [
    "@radix-ui/react-dialog",
    "vaul",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/revola/revola.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\r\nimport { Drawer as DrawerPrimitive, Content as VaulDrawerContent } from \"vaul\";\r\nimport { X } from \"lucide-react\";\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport useMediaQuery from \"@/hooks/use-media-query\";\r\n\r\nexport type ResponsiveDialogProps = React.ComponentProps<typeof DrawerPrimitive.Root>;\r\n\r\ntype ResponsiveDialogContextProps = {\r\n  modal?: boolean;\r\n  dismissible?: boolean;\r\n  direction?: \"top\" | \"right\" | \"bottom\" | \"left\";\r\n  onlyDrawer?: boolean;\r\n  onlyDialog?: boolean;\r\n  alert?: boolean;\r\n};\r\n\r\ntype ResponsiveDialogProviderProps = {\r\n  children: React.ReactNode;\r\n} & ResponsiveDialogContextProps;\r\n\r\nconst ResponsiveDialogContext = React.createContext<ResponsiveDialogContextProps>({});\r\nconst MOBILE_BREAKPOINT = \"(min-width: 640px)\";\r\n\r\nconst ResponsiveDialogProvider = ({\r\n  modal = true,\r\n  dismissible = true,\r\n  direction = \"bottom\",\r\n  onlyDrawer = false,\r\n  onlyDialog = false,\r\n  alert = false,\r\n  children,\r\n}: ResponsiveDialogProviderProps) => {\r\n  return (\r\n    <ResponsiveDialogContext.Provider value={{ modal, dismissible, direction, onlyDrawer, onlyDialog, alert }}>\r\n      {children}\r\n    </ResponsiveDialogContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useResponsiveDialog = () => {\r\n  const context = React.useContext(ResponsiveDialogContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useResponsiveDialog must be used within a <ResponsiveDialog />\");\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nconst ResponsiveDialog = ({\r\n  modal = true,\r\n  dismissible = true,\r\n  direction = \"bottom\",\r\n  onlyDrawer = false,\r\n  onlyDialog = false,\r\n  alert = false,\r\n  shouldScaleBackground = true,\r\n  open: controlledOpen,\r\n  onOpenChange: controlledOnOpenChange,\r\n  ...props\r\n}: ResponsiveDialogProps & { onlyDrawer?: boolean; onlyDialog?: boolean; alert?: boolean }) => {\r\n  const [internalState, setInternalState] = React.useState<boolean>(false);\r\n\r\n  const isControlledOpen = typeof controlledOpen === \"undefined\";\r\n  const toggleInternalState = () => setInternalState((prev) => !prev);\r\n\r\n  const open = isControlledOpen ? internalState : controlledOpen;\r\n  const onOpenChange = isControlledOpen ? toggleInternalState : controlledOnOpenChange;\r\n\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialog = shouldUseDialog ? DialogPrimitive.Root : DrawerPrimitive.Root;\r\n\r\n  const effectiveModal = alert ? true : modal;\r\n  const effectiveDismissible = alert ? true : dismissible;\r\n\r\n  return (\r\n    <ResponsiveDialogProvider\r\n      modal={effectiveModal}\r\n      dismissible={effectiveDismissible}\r\n      direction={direction}\r\n      onlyDrawer={onlyDrawer}\r\n      onlyDialog={onlyDialog}\r\n      alert={alert}\r\n    >\r\n      <ResponsiveDialog\r\n        modal={effectiveModal}\r\n        direction={direction}\r\n        dismissible={effectiveDismissible}\r\n        shouldScaleBackground={shouldScaleBackground}\r\n        open={open}\r\n        onOpenChange={onOpenChange}\r\n        {...props}\r\n      />\r\n    </ResponsiveDialogProvider>\r\n  );\r\n};\r\nResponsiveDialog.displayName = \"ResponsiveDialog\";\r\n\r\nconst ResponsiveDialogTrigger = ({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) => {\r\n  const { onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogTrigger = shouldUseDialog ? DialogPrimitive.Trigger : DrawerPrimitive.Trigger;\r\n  return <ResponsiveDialogTrigger {...props} />;\r\n};\r\nResponsiveDialogTrigger.displayName = \"ResponsiveDialogTrigger\";\r\n\r\nconst ResponsiveDialogPortal = ({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) => {\r\n  const { onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogPortal = shouldUseDialog ? DialogPrimitive.Portal : DrawerPrimitive.Portal;\r\n  return <ResponsiveDialogPortal {...props} />;\r\n};\r\nResponsiveDialogPortal.displayName = \"ResponsiveDialogPortal\";\r\n\r\nconst ResponsiveDialogOverlay = ({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Overlay>) => {\r\n  const { onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogOverlay = shouldUseDialog ? DialogPrimitive.Overlay : DrawerPrimitive.Overlay;\r\n  return (\r\n    <ResponsiveDialogOverlay\r\n      {...props}\r\n      className={cn(\r\n        \"fixed inset-0 z-50 bg-black/50 sm:data-[state=open]:animate-in sm:data-[state=closed]:animate-out sm:data-[state=closed]:fade-out-0 sm:data-[state=open]:fade-in-0\",\r\n        className\r\n      )}\r\n    />\r\n  );\r\n};\r\nResponsiveDialogOverlay.displayName = \"ResponsiveDialogOverlay\";\r\n\r\nconst ResponsiveDialogClose = ({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) => {\r\n  const { dismissible, alert, onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogClose = shouldUseDialog ? DialogPrimitive.Close : DrawerPrimitive.Close;\r\n\r\n  const shouldPreventClose = !dismissible && !alert;\r\n\r\n  return (\r\n    <ResponsiveDialogClose\r\n      aria-label=\"Close\"\r\n      {...(shouldPreventClose && { onClick: (e) => e.preventDefault() })}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\nResponsiveDialogClose.displayName = \"ResponsiveDialogClose\";\r\n\r\nconst ResponsiveDialogContentVariants = cva(\"fixed z-[9999] bg-background\", {\r\n  variants: {\r\n    device: {\r\n      desktop:\r\n        \"left-1/2 top-1/2 grid max-h-[calc(100%-4rem)] w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:max-w-lg\",\r\n      mobile: \"flex \",\r\n    },\r\n    direction: {\r\n      bottom: \"\",\r\n      top: \"\",\r\n      left: \"\",\r\n      right: \"\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    device: \"desktop\",\r\n    direction: \"bottom\",\r\n  },\r\n  compoundVariants: [\r\n    {\r\n      device: \"mobile\",\r\n      direction: \"bottom\",\r\n      className:\r\n        \"inset-x-0 bottom-0 mt-24 h-fit max-h-[65%] flex-col rounded-t-[10px] border border-b-0 border-primary/10\",\r\n    },\r\n    {\r\n      device: \"mobile\",\r\n      direction: \"top\",\r\n      className:\r\n        \"inset-x-0 top-0 mb-24 h-fit max-h-[65%] flex-col rounded-b-[10px] border border-b-0 border-primary/10\",\r\n    },\r\n    {\r\n      device: \"mobile\",\r\n      direction: \"left\",\r\n      className:\r\n        \"bottom-2 left-2 top-2 flex w-[310px] bg-transparent outline-none [--initial-transform:calc(100%+8px)]\",\r\n    },\r\n    {\r\n      device: \"mobile\",\r\n      direction: \"right\",\r\n      className: \"bottom-2 right-2 top-2 w-[310px] bg-transparent outline-none [--initial-transform:calc(100%+8px)]\",\r\n    },\r\n  ],\r\n});\r\n\r\nconst ResponsiveDialogContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & {\r\n    showCloseButton?: boolean;\r\n    /** Styles for the built in close button */\r\n    closeButtonClassName?: string;\r\n    /** Styles for the drag handle */\r\n    dragHandleClassName?: string;\r\n  }\r\n>(({ className, children, showCloseButton = true, closeButtonClassName, dragHandleClassName, ...props }, ref) => {\r\n  const { direction, modal, dismissible, alert, onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogContent = shouldUseDialog ? DialogPrimitive.Content : VaulDrawerContent;\r\n\r\n  const shouldShowCloseButton = !alert && showCloseButton;\r\n  const shouldPreventEscape = !dismissible && !alert;\r\n  const shouldPreventOutsideInteraction = !modal || (!dismissible && !alert) || alert;\r\n\r\n  return (\r\n    <ResponsiveDialogPortal>\r\n      <ResponsiveDialogOverlay />\r\n      <ResponsiveDialogContent\r\n        ref={ref}\r\n        {...props}\r\n        {...(shouldPreventEscape && shouldUseDialog && { onEscapeKeyDown: (e) => e.preventDefault() })}\r\n        {...(shouldPreventOutsideInteraction &&\r\n          shouldUseDialog && {\r\n            onInteractOutside: (e) => e.preventDefault(),\r\n          })}\r\n        {...(!shouldUseDialog &&\r\n          shouldPreventOutsideInteraction && {\r\n            onPointerDownOutside: (e) => e.preventDefault(),\r\n            onInteractOutside: (e) => e.preventDefault(),\r\n          })}\r\n        className={cn(\r\n          ResponsiveDialogContentVariants({\r\n            device: shouldUseDialog ? \"desktop\" : \"mobile\",\r\n            direction,\r\n          }),\r\n          className\r\n        )}\r\n      >\r\n        {!shouldUseDialog && direction === \"bottom\" && (\r\n          <div\r\n            className={cn(\r\n              \"mx-auto my-4 h-1.5 w-14 rounded-full bg-muted-foreground/25 pb-1.5 data-[vaul-handle]:h-1.5 data-[vaul-handle]:w-14 data-[vaul-handle]:pb-1.5 dark:bg-muted\",\r\n              dragHandleClassName\r\n            )}\r\n          />\r\n        )}\r\n        {children}\r\n        {shouldShowCloseButton && (\r\n          <ResponsiveDialogClose\r\n            className={cn(\r\n              \"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background backdrop-blur-sm transition-opacity hover:opacity-100 focus:outline-none focus:ring-offset-2 focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-white\",\r\n              closeButtonClassName\r\n            )}\r\n          >\r\n            <X className=\"size-4\" />\r\n            <span className=\"sr-only\">close</span>\r\n          </ResponsiveDialogClose>\r\n        )}\r\n      </ResponsiveDialogContent>\r\n    </ResponsiveDialogPortal>\r\n  );\r\n});\r\nResponsiveDialogContent.displayName = \"ResponsiveDialogContent\";\r\n\r\nconst ResponsiveDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\r\n  return <div className={cn(\"flex flex-col gap-1.5 text-center sm:text-left\", className)} {...props} />;\r\n};\r\nResponsiveDialogHeader.displayName = \"ResponsiveDialogHeader\";\r\n\r\nconst ResponsiveDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\r\n  return <footer className={cn(\"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\", className)} {...props} />;\r\n};\r\nResponsiveDialogFooter.displayName = \"ResponsiveDialogFooter\";\r\n\r\nconst ResponsiveDialogTitle = React.forwardRef<\r\n  React.ComponentRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => {\r\n  const { onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogTitle = shouldUseDialog ? DialogPrimitive.Title : DrawerPrimitive.Title;\r\n  return (\r\n    <ResponsiveDialogTitle\r\n      ref={ref}\r\n      className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nResponsiveDialogTitle.displayName = \"ResponsiveDialogTitle\";\r\n\r\nconst ResponsiveDialogDescription = React.forwardRef<\r\n  React.ComponentRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => {\r\n  const { onlyDrawer, onlyDialog } = useResponsiveDialog();\r\n  const isDesktop = useMediaQuery(MOBILE_BREAKPOINT);\r\n\r\n  const shouldUseDialog = onlyDialog || (!onlyDrawer && isDesktop);\r\n  const ResponsiveDialogDescription = shouldUseDialog ? DialogPrimitive.Description : DrawerPrimitive.Description;\r\n  return (\r\n    <ResponsiveDialogDescription ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\r\n  );\r\n});\r\n\r\nResponsiveDialogDescription.displayName = \"ResponsiveDialogDescription\";\r\n\r\nexport {\r\n  ResponsiveDialog,\r\n  ResponsiveDialogClose,\r\n  ResponsiveDialogContent,\r\n  ResponsiveDialogDescription,\r\n  ResponsiveDialogFooter,\r\n  ResponsiveDialogHeader,\r\n  ResponsiveDialogOverlay,\r\n  ResponsiveDialogPortal,\r\n  ResponsiveDialogTitle,\r\n  ResponsiveDialogTrigger,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "hooks/use-media-query.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMediaQuery = (query: string) => {\r\n  const [matches, setMatches] = useState<boolean | null>(null);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n\r\n    if (media.matches !== matches) setMatches(media.matches);\r\n\r\n    const listener = () => setMatches(media.matches);\r\n\r\n    window.addEventListener(\"resize\", listener);\r\n    return () => window.removeEventListener(\"resize\", listener);\r\n  }, [query, matches]);\r\n\r\n  return matches;\r\n};\r\n\r\nexport default useMediaQuery;\r\n",
      "type": "registry:hook"
    }
  ]
}